# React Destek Sistemi Geliştirme Promptları (PostgreSQL & Sequelize)

Bu dosya, sağlanan plana göre React, Node.js/Express, PostgreSQL ve Sequelize kullanarak bir uygulama destek sistemi geliştirmek için Manus AI'a verilebilecek prompt'ları içermektedir.

## Genel Başlangıç Prompt'u (Projeyi Başlatmak İçin)

Merhaba Manus AI,Sağlanan plana dayanarak React tabanlı bir uygulama destek sistemi geliştirmek istiyorum. Backend için Node.js/Express, Frontend için React ve veritabanı olarak PostgreSQL kullanacağım. Lütfen aşağıdaki adımları takip ederek projeyi yapılandırmama ve geliştirmeme yardımcı ol:Proje Kurulumu: PERN (PostgreSQL, Express, React, Node.js) yığınına uygun bir proje iskeleti oluştur (Backend için Express/Node.js, Frontend için Create React App veya Vite). Gerekli temel bağımlılıkları (örneğin, express, sequelize, pg, pg-hstore, react, react-dom, axios, bcryptjs, jsonwebtoken, cors, dotenv) kur. PostgreSQL veritabanı bağlantı yapılandırmasını (örn. config/config.json veya environment variables .env dosyası aracılığıyla) ayarla.Klasör Yapısı: Hem backend hem de frontend için ölçeklenebilir ve modüler bir klasör yapısı öner ve oluştur (örn. backend için controllers, routes, models, middleware, config, migrations, seeders; frontend için components, pages, services, contexts/store, hooks, utils).Sequelize Kurulumu: Sequelize CLI'ı kur (npm install --save-dev sequelize-cli) ve proje için ilk yapılandırmayı (npx sequelize-cli init) yap.
---

## Adım Adım Özellik Geliştirme Prompt'ları

Aşağıdaki prompt'ları projenin farklı aşamalarında ayrı ayrı kullanabilirsiniz:

### 1. Veritabanı Modelleri ve İlişkileri (Sequelize)

Manus AI, sağlanan plandaki veritabanı şemasına göre PostgreSQL için Sequelize modellerini (models klasöründe) oluştur:Kullanıcılar (User)Ticket'lar (Ticket)Mesajlar (Message)Durumlar (Status)Durum Geçişleri (StatusTransition) - OpsiyonelEkler (Attachment)Yönetim Ayarları (AdminSetting)Denetim Günlükleri (AuditLog)Modellerde belirtilen alanları (örneğin, username, email, password, subject, description, content, statusId vb.) uygun Sequelize DataTypes (örn., STRING, TEXT, INTEGER, BOOLEAN, DATE, ENUM) ile tanımla. Şifre alanı için allowNull: false ve diğer gerekli doğrulamaları ekle.Modeller arasında gerekli ilişkileri (associations) associate metodları içinde tanımla:Ticket belongsTo User (foreignKey: 'userId')User hasMany Tickets (foreignKey: 'userId')Message belongsTo Ticket (foreignKey: 'ticketId')Ticket hasMany Messages (foreignKey: 'ticketId')Message belongsTo User (foreignKey: 'senderId')User hasMany Messages (foreignKey: 'senderId')Ticket belongsTo Status (foreignKey: 'statusId')Status hasMany Tickets (foreignKey: 'statusId')Ticket belongsTo User (as: 'assignedOperator', foreignKey: 'assignedOperatorId', allowNull: true)User hasMany Tickets (as: 'assignedTickets', foreignKey: 'assignedOperatorId')Attachment belongsTo Ticket (foreignKey: 'ticketId')Ticket hasMany Attachments (foreignKey: 'ticketId')AuditLog belongsTo Ticket (foreignKey: 'ticketId', allowNull: true)AuditLog belongsTo User (foreignKey: 'userId')Sequelize migration dosyalarını bu modellere göre oluştur veya mevcut modellerden migration oluşturma komutunu belirt. (Örn: npx sequelize-cli model:generate --name User --attributes username:string,email:string,password:string,role:enum:'customer','operator','admin')*(Not: Manus AI doğrudan migration oluşturamayabilir, ancak model tanımlarını sağladıktan sonra sizden `npx sequelize-cli db:migrate` komutunu çalıştırmanızı isteyebilir.)*

### 2. Kullanıcı Kimlik Doğrulama ve Yetkilendirme (Backend & Frontend)

Manus AI, PostgreSQL ve Sequelize kullanarak kullanıcı kimlik doğrulama ve yetkilendirme sistemini geliştir:Backend (Node.js/Express):Kullanıcı kaydı (User.create) ve girişi (User.findOne({ where: { email } })) için API endpoint'leri (/api/auth/register, /api/auth/login) oluştur. Şifre hashleme için bcryptjs kullan (User modeline beforeCreate hook ekleyebilirsin). Girdi verilerini doğrula (express-validator kullanabilirsin).Giriş başarılı olduğunda JWT (JSON Web Tokens) oluşturup geri döndür (jsonwebtoken kütüphanesi). JWT payload'ına userId ve role ekle.Gelen isteklerde JWT'yi doğrulamak ve kullanıcı bilgisini (req.user) eklemek için bir middleware (authenticateToken) oluştur.Rol tabanlı erişim kontrolü (RBAC) için middleware'ler (isAdmin, isOperator, isCustomerOrOperator) oluştur. Bu middleware'ler req.user.role bilgisini kontrol etsin. Rotaları bu middleware'ler ile koru.Frontend (React):Kayıt ve Giriş formları içeren bileşenleri (RegisterPage, LoginPage) oluştur. Form gönderimlerini yönet.Backend API'lerine istek atmak için axios kullanarak merkezi bir servis modülü yaz (services/authService.js).Başarılı giriş sonrası JWT'yi güvenli bir şekilde (localStorage veya sessionStorage) sakla. axios instance'ı oluşturup istek header'larına JWT'yi otomatik ekle (Authorization: Bearer <token>).Kullanıcı oturum durumunu (giriş yapılı mı, kullanıcı bilgileri, rol) yönetmek için Context API (AuthContext) veya Zustand/Redux kullan. Uygulama başlangıcında token varsa kullanıcı bilgisini alıp state'i güncelle.Rota koruması uygula (ProtectedRoute bileşeni). Bu bileşen, beklenen rollere göre veya sadece giriş yapmış olma durumuna göre altındaki rotaları render etsin.
### 3. Ticket Oluşturma ve Listeleme (Backend & Frontend)

Manus AI, Sequelize kullanarak ticket oluşturma ve görüntüleme işlevlerini ekle:Backend (Node.js/Express):Yeni ticket oluşturmak için API endpoint'i (POST /api/tickets) oluştur. authenticateToken middleware'ini kullan. Giriş yapmış kullanıcı ID'sini (req.user.id) userId olarak ata. Gelen veriyi (konu, açıklama, kategori vb.) doğrula. Varsayılan bir başlangıç durumu (örneğin 'Açık' ID'si) ile Ticket.create kullanarak kaydet.Kullanıcının kendi ticket'larını listelemek için API endpoint'i (GET /api/tickets/my) oluştur (authenticateToken middleware). Ticket.findAll({ where: { userId: req.user.id }, include: [Status, { model: User, as: 'assignedOperator', attributes: ['id', 'username'] }], order: [['updatedAt', 'DESC']] }) gibi bir sorgu kullan.Operatörlerin/Yöneticilerin tüm ticket'ları (veya atanmamış olanları) listelemesi için API endpoint'i (GET /api/tickets/queue) oluştur (authenticateToken, isOperator middleware'leri). Gerekirse filtreleme (örn. durum, atanmamış) ve sayfalama ekle. include ile ilişkili verileri (User, Status, assignedOperator) getir.Tek bir ticket detayını getirmek için API endpoint'i (GET /api/tickets/:id) oluştur (authenticateToken middleware). Ticket'ı Ticket.findByPk(req.params.id, { include: [...] }) ile bul. Kullanıcının bu ticket'ı görme yetkisi olup olmadığını kontrol et (kendi ticket'ı veya operatör/yönetici ise).Frontend (React):Yeni ticket oluşturmak için bir form içeren bileşen (CreateTicketPage veya modal) oluştur. react-hook-form gibi bir kütüphane kullanabilirsin. Başarılı oluşturma sonrası kullanıcıyı yönlendir.Kullanıcının kendi ticket'larını listeleyen bir sayfa/bileşen (MyTicketsPage) oluştur. Tablo veya kart görünümü kullanabilirsin. Ticket detayına gitmek için link ekle.Operatörler/Yöneticiler için ticket kuyruğunu gösteren bir sayfa/bileşen (TicketQueuePage) oluştur. Filtreleme ve sayfalama seçenekleri ekle.Ticket detaylarını gösteren bir sayfa (TicketDetailPage) oluştur. Ticket bilgilerini, durumunu, atanan operatörü vb. göster.Backend API'leri ile iletişim kurmak için services/ticketService.js gibi servis fonksiyonları yaz. Loading ve error durumlarını yönet.
### 4. Operatör Ataması ve Ticket Durum Yönetimi (Backend & Frontend)

Manus AI, Sequelize kullanarak operatör ataması ve ticket durum güncelleme işlevlerini geliştir:Backend (Node.js/Express):Bir ticket'ı belirli bir operatöre atamak için API endpoint'i (PUT /api/tickets/:id/assign) oluştur (authenticateToken, isAdmin veya isOperator middleware). İstek gövdesinden operatorId'yi al. Ticket.update({ assignedOperatorId: operatorId }, { where: { id: req.params.id } }) kullan. Atanacak operatörün geçerli bir operatör olduğunu doğrula.Bir ticket'ın durumunu güncellemek için API endpoint'i (PUT /api/tickets/:id/status) oluştur (authenticateToken, isOperator middleware). İstek gövdesinden statusId'yi al. Ticket.update({ statusId: newStatusId }, { where: { id: req.params.id } }) kullan. Yeni statusId'nin geçerli bir Durum (Status) olduğundan emin ol. Gerekirse durum geçiş kurallarını uygula.Frontend (React):TicketDetailPage veya TicketQueuePage içinde operatör atama işlevini (örn. bir dropdown ile operatör listesi ve atama butonu) ekle. Bu bölüm sadece yetkili roller (admin/operator) için görünür olsun. Operatör listesini getirmek için ayrı bir API endpoint'i (GET /api/users?role=operator) gerekebilir.TicketDetailPage içinde ticket durumunu değiştirmek için bir arayüz (örn. dropdown veya butonlar) ekle. Bu bölüm sadece yetkili roller için görünür olsun. Mevcut durumları (Status listesi) API'den alıp dropdown'ı doldur.
### 5. Gerçek Zamanlı Sohbet Entegrasyonu (Backend & Frontend)

Manus AI, ticket'lar için gerçek zamanlı sohbet özelliğini entegre et (PostgreSQL tabanlı):Backend (Node.js/Express + Socket.IO):socket.io kütüphanesini kur ve Express sunucusuna entegre et. Gerekirse JWT ile socket bağlantılarını doğrula.Kullanıcı bir ticket sohbetine bağlandığında (connection eventi sonrası), o ticket'a özel bir 'oda'ya katılmasını sağla (socket.join('ticket_' + ticketId)).Yeni bir mesaj gönderildiğinde ('send_message' eventi), mesajı Mesajlar (Message) tablosuna Sequelize kullanarak (Message.create({ content, ticketId, senderId: socket.user.id })) kaydet. Kaydedilen mesajı (gönderen kullanıcı bilgisi ile birlikte) aynı odadaki tüm kullanıcılara (io.to('ticket_' + ticketId).emit('receive_message', newMessageData)) ilet.Ticket'a ait geçmiş mesajları getirmek için API endpoint'i (GET /api/tickets/:id/messages) oluştur (authenticateToken middleware). Message.findAll({ where: { ticketId: req.params.id }, include: [{ model: User, attributes: ['id', 'username', 'role'] }], order: [['createdAt', 'ASC']] }) sorgusunu kullan. Kullanıcının yetkisini kontrol et.Frontend (React):TicketDetailPage içine bir sohbet arayüzü bileşeni (ChatWindow) ekle. Mesajları listelemek ve yeni mesaj girmek için alanlar içersin. react-chat-elements veya kendi bileşenlerini kullanabilirsin.Sayfa yüklendiğinde veya sohbet bileşeni mount edildiğinde Socket.IO sunucusuna bağlan (gerekirse token ile). İlgili ticket odasına katılmak için bir event ('join_ticket') emit et.Yeni mesajları dinlemek için socket.on('receive_message', handler) kullan ve gelen mesajları state'e ekleyerek arayüzü güncelle.Kullanıcının mesaj yazıp göndermesi için bir input alanı ve buton ekle. Gönder butonuna tıklandığında 'send_message' event'ini emit et (mesaj içeriği ve ticketId ile).Bileşen yüklendiğinde ticket'a ait geçmiş mesajları API'den (/api/tickets/:id/messages) yükle ve sohbet penceresinde göster.
### 6. Yönetim Paneli (Temel) (Backend & Frontend)

Manus AI, yönetim paneli için temel yapıyı ve durum yönetimi özelliğini (PostgreSQL ile) oluştur:Backend (Node.js/Express):Özel ticket durumlarını (Statuses) yönetmek için Sequelize kullanarak CRUD API endpoint'leri oluştur (GET, POST, PUT, DELETE /api/admin/statuses). Bu endpointleri authenticateToken ve isAdmin middleware'leri ile koru. (Status.findAll, Status.create, Status.update, Status.destroy). Bir durum silinmeden önce ilişkili ticket olup olmadığını kontrol et.Diğer ayarları (AdminSetting tablosu) yönetmek için CRUD API endpoint'leri oluştur (/api/admin/settings).Kullanıcıları yönetmek (listeleme, rol değiştirme, etkinleştirme/devre dışı bırakma) için API endpoint'leri oluştur (/api/admin/users).Frontend (React):Yönetici paneli için ayrı bir layout/bölüm (AdminLayout) ve bu bölüme yönlendiren rotalar (/admin/*) oluştur. Bu rotaları ProtectedRoute ile sadece 'admin' rolündeki kullanıcıların erişimine aç.Ticket durumlarını listelemek, eklemek, düzenlemek ve silmek/devre dışı bırakmak için bir sayfa/bileşen (ManageStatusesPage) oluştur. Verileri tablo üzerinde göster. Ekleme/Düzenleme için modal formlar kullan.Kullanıcıları yönetmek için bir sayfa/bileşen (ManageUsersPage) oluştur.Yönetim paneli için react-admin gibi bir kütüphane kullanmayı değerlendir; bu, CRUD arayüzlerini hızla oluşturmaya yardımcı olabilir.Yönetim API'leri ile iletişim kurmak için services/adminService.js gibi servis fonksiyonları yaz.
### 7. Güvenlik, Test ve Performans (Genel Yönergeler)

Manus AI, geliştirme sürecinde PostgreSQL'i de göz önünde bulundurarak aşağıdaki hususlara dikkat et:Güvenlik: Backend'de helmet (güvenlik header'ları için), cors (doğru yapılandırmayla) kullan. API endpoint'lerinde express-validator ile güçlü veri doğrulama yap. Sequelize'nin ORM özellikleri SQL Injection'a karşı koruma sağlar, ancak ham sorgu (sequelize.query) kullanmaktan kaçın veya dikkatli kullan. XSS koruması için frontend'de kullanıcı girdilerini sanitize et (örn. DOMPurify) veya React'in doğal korumasına güven. CSRF token'ları (csurf middleware'i) kullanmayı değerlendir. Rol bazlı yetkilendirmeyi tüm ilgili endpointlerde uygula. Bağımlılıkları (npm audit) düzenli kontrol et ve güncelle. Hassas bilgileri (şifreler, tokenlar) loglama. Güvenli JWT yönetimi uygula (kısa ömürlü tokenlar, refresh token stratejisi).Test: Backend için Jest/Mocha/Chai ve supertest ile API endpoint (entegrasyon) testleri yaz. Sequelize modellerini mocklamak için sequelize-mock veya test veritabanı (NODE_ENV=test için ayrı konfigürasyon) kullan. Frontend için Jest ve React Testing Library ile birim/entegrasyon testleri yaz. Kritik akışları (giriş, ticket oluşturma, mesaj gönderme) test et.Performans: Frontend'de React.memo, useMemo, useCallback ile gereksiz render'ları önle. Büyük listeler için sanallaştırma (react-window, react-virtualized) veya sayfalama kullan. Kod bölme (React.lazy, Suspense) ile ilk yükleme süresini optimize et. Bundle boyutunu analiz et (source-map-explorer). Backend'de sık kullanılan sorgular için PostgreSQL tablolarına uygun index'ler (CREATE INDEX ...) ekle (Sequelize migration ile tanımlanabilir). Sequelize sorgularında include kullanırken sadece gerekli alanları (attributes) seç. Veritabanı bağlantı havuzunu (pool) doğru yapılandır. Gerekirse caching (örn. Redis) kullanmayı değerlendir.
---

## Önemli Notlar

* Bu prompt'ları Manus AI'a verirken, her seferinde projenin genel bağlamını (React destek sistemi, Node.js/Express, PostgreSQL, Sequelize) hatırlatmak faydalı olabilir.
* Manus AI'ın verdiği kodları ve önerileri dikkatlice inceleyin, test edin ve projenizin özel gereksinimlerine göre uyarlayın.
* Geliştirme sürecini aşamalara bölün. Önce temel CRUD işlevlerini tamamlayın, sonra daha karmaşık özellikleri ekleyin.
* Sequelize ORM'inin konfigürasyonu, model tanımları, ilişkileri ve migration'ları PostgreSQL ile çalışmanın temelini oluşturur.
* Veritabanı şeması değişiklikleri için Sequelize Migrations kullanmak en iyi pratiktir.
* `dotenv` kütüphanesini kullanarak hassas bilgileri (veritabanı şifresi, JWT secret) `.env` dosyasında saklayın ve bu dosyayı Git'e eklemediğinizden emin olun.

